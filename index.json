[{"categories":["Game Development"],"contents":"안녕하세요. Wasd Games에 hobi 입니다.\n현재 개발 중인 게임에 디시전 관련 내용을 공유하려고 합니다.\n💡 목적 : 펫\u0026amp;몬스터 메타포를 결정합니다.\nR\u0026amp;D 결과 내용 공유 : 결정과정중 겪은 내용 먼저 알려드리고, 결정된 사항들을 공유하는게 이 결정을 내린 배경을 이해하는데 도움이 되실 것입니다. 결정과정중 겪은 내용 공유 먼저, 우리 게임에 다른 게임의 메타포를 무지성으로 적용하는데 어려움이 있었습니다.\n#1 로블리안님과의 대화\n로블리안님의 Art요청은 크게 두가지 였습니다.\n우리게임의 오리지널리티를 가졌으면 합니다. 효율성(적은 노동으로 많은 베리에이션)도 챙겨야 합니다. 1번과 2번은 모순되므로, 논의결과 2번인 효율성을 챙기는 실리주의 노선으로 확정되었습니다.\n#2 타게임 몬스터처럼 정형화된 실루엣, 눈, 입 등을 확정지어야 합니다.\n그러기 위해선 패턴을 확정지어야 합니다.\n간단히 말해, 물을 담을 유리잔을 만들어야 합니다. 그래야 어떤 펫\u0026amp;몬스터를 만들더라도 유효한 베리에이션을 찍어낼 수 있기 때문입니다.\n#3 잔혹동화 : 공포, 기괴함을 표현하려고 함\n현재 개발중인 게임은 잔혹동화와 공포를 기본 컨셉으로 합니다.\n펫시뮬레이터는 기존동물형태나 이미 아는 생물(드래곤, 유니콘)등의 표현이 수월합니다.\n반면, 사람은 ‘언캐니 밸리’에서 가장 많이 느낍니다. 인형과 사람의 형상에서 살짝 벗어난 느낌입니다. 발이 떠있는 귀신이라든지, 눈도 있고 다 멀쩡한데 자세히 보면 안광이 나오는 등 사람처럼 느끼면서도 사람이 아닐때 느끼는 감정이 대표적입니다.\n그렇다보니, 다른 게임처럼 폴리곤으로 원본 실루엣을 만들고 토끼귀, 고양이귀 등으로 베리에이션을 치면서 동시에 공포형태를 가져가는게 쉽지 않았습니다.\n그럼에도 결정을 해야하기 때문에 지금 선택할 수 있는 범위에서 구체적인 결정을 내렸습니다.\n결정사항 공유 #결정1. 펫\u0026amp;몬스터의 초기실루엣은 종(bell)형입니다.\n육면체는 다른 게임에서 많이 사용하고 있습니다. 이 형태는 앞면이 얼굴, 뒤가 몸이라는 감각을 느끼게 함으로 활용도가 좋지만, 언급했듯이 다른곳에서 차용하는 빈도가 높다보니, ‘우리것’이라는 느낌보다는 ‘아류’느낌을 줍니다.\n구(sphere)형은 발이 있으면 그자체로 이상한 감각을 느끼게 합니다.\n그러다가, 구를 반구형태로 상상해봤습니다.\n반구는 종(bell)형입니다.\n종(bell)형 실루엣은 아랫쪽에 무게감을 주면서, 발을 달거나 몸을 달 수 있는 구조로 변형할 수도 있습니다.\n또한, 반구 형태로 땅에 끌려가는 느낌을 주기도 하고, 천을 덮어쓴 고스트 느낌도 줄 수 있습니다.\n즉, 공중 및 지상에서도 활용이 가능하며, addon 스러운 팔다리가 있어도 좋은 타입으로 판단했습니다.\n#결정2. 베리에이션은 텍스쳐로 설정\n잔혹동화의 봉제인형이니 만큼 찢어진 부분을 꼬매는 느낌을 표현하며, 다양성을 확장하기 위해 ‘텍스쳐 베리에이션’이 결정되었습니다.\n1단계 텍스쳐 베리에이션 2단계 지오메트리 베리에이션 3단계 휴머노이드 베리에이션 (우측) BASE 종(bell)형, 위에서 아래로 1,2,3단계 베리에이션\n(좌측) 봉제인형 베리에이션(브레인스토밍)\n보스전 컨셉(자이언트, 배에서 지속적으로 몬스터가 쏟아져 나온다.)\n기타 : 팀원들반응 매우 만족(주관적인 반응) 엄지손톱적인 느낌으로 표현할 수도 있겠다. 인형으로 만들어 우리 마스코트로 만들어 팔고 싶다. 우리 게임 전반에서 종형을 사용하자 ","date":"03","image":"/images/post/post3/concept2.png","permalink":"https://wasd.so/blog/post-3/","tags":["Art Directing","Decision","Development","Pet"],"title":"펫 \u0026 몬스터 메타포 결정"},{"categories":["Game Development"],"contents":"안녕하세요. 팀 wasd 에 IRoblian 입니다.\n2022년도 샌드박스 네트워크 로블록스 공모전에 참여하게 되어 후기를 남깁니다.\n저희도 이번에 한번 참여하게 되어서, 먼저, 게임 홍보부터 하고 가겠습니다. :)\n해머워즈 홍보 해머워즈는 상대방을 🔨해머로 날려버리는 시원시원한 빠른 템포의 액션 게임입니다.\n🔨 - 강력한 무기를 얻으세요\n👊 - 때리고, 날려서 더 많은 포인트를 얻고 강해지세요.\n💎 - 상자를 열어 보상을 얻고, 뱃지를 이용해 스탯을 올리세요.\n🎮 플레이 방법\n[Q] : 대시, 날아가거나 공격을 피할 수 있습니다. [Click] : 휘두르고 공격합니다. [F] : 로비에서 상호작용이 가능합니다. 🚀 출시 기념 코드 : welcome\n🎁 샌드박스 네트워크 공모전 기념 코드 : sandbox\n특히, 샌드박스 공모전 기념 코드는 강력하지만 친구들과 함께 웃으면서 즐길 수 있는 아이템을 지급하고 있습니다 :)\n-\u0026gt; 플레이 해보기\n여기서부턴 후기 입니다.\nWasd games? 먼저 저희팀을 간단하게 소개해드리겠습니다. 저희 팀은 이름 그대로 wasd,\n컴퓨터 게임을 할때 가장 기본적이면서 기초적인 게임의 문법에서 시작하는 \u0026ldquo;원초적 재미\u0026quot;를 쫓는 개발팀입니다.\n또한 개발에 대해서는 \u0026ldquo;장인 정신\u0026quot;으로 다가가는 그런 팀입니다.\n총 4명으로 구성되어있고, 아티스트 1인, 엔지니어 2인, 게임 디자이너 1인 이렇게 게임을 만들고 있습니다 :)\n팀의 기본 모토는 \u0026ldquo;최고의 팀이 최고의 게임을 만든다\u0026rdquo; 로 팀플레이를 매우 중시하고 있습니다.\n해머워즈 (HammerWars) 저희팀의 첫 공개 게임은 해머워즈라는 게임입니다. 물론 이전에 비공식(?)적인 게임들이 몇개 있었지만.. 크게 인기있진 않았네요.\n(덕분에 제 모자가 O\u0026rsquo;s 모자이지만서도..)\n해머워즈는\n공격을 했을때, 죽는게 아니라 날아간다면 어떨까?\n라는 작은 상상에서 시작한 게임입니다. 기본 무기인 해머를 가지고 빠른 템포의 근접 액션 게임을 로블록스에서 최대한 즐기실 수 있게 만들었습니다.\n원초적 재미 앞에서 이야기 했듯이 저희팀은 원초적 재미를 많이 추구합니다. 친구들끼리 순수한 마음으로 즐기던, 그런 게임을 말이죠. 이번 게임에서 찾은 원초적 재미는 \u0026ldquo;날려버리기\u0026rdquo; 입니다.\n죽인다(Kill)라는 표현은 게임의 폭력성을 이야기할때 가장 많이 대두되는 이야기 중 하나입니다. 날려버린다라는 개념은 남녀노소 즐길 수 있는 개념이 아닌가 싶습니다. 또한, 시원시원한 액션게임과도 잘 접목된다고 생각했습니다.\n강력한 코어 게임 원초적 재미를 찾았다고 해도, 사실 근접에 날려버리는 게임을 만들기란 로블록스에서 꽤나 어려운 이야기입니다. 특히나 빠른 템포의 근접 액션은 더욱 난이도가 높죠. 그래서 저희도 처음에 이부분을 집중해서 개발했고, 지금 모습에 만족하고 있습니다.\n기본적으로 코어게임은 다음과 같은 식으로 만들어졌습니다.\n서버에서 공격을 수행하면, 클라에서 해당 수행에 대한 이벤트를 받습니다. 클라에서 1차 판정을 진행합니다. 서버에서 2차 판정을 진행하고, 각 데미지와 날아갈 파라미터를 세팅합니다. 서버 판정의 결과를 시뮬레이션합니다. 클라에게 판정 결과를 알려줘서 피격자와 공격자에게 적절한 이펙트를 부여합니다. 날립니다. 항상 고민이 되는 메타게임 게임에서 성장은 저뿐만 아니라 많은 개발하시는분이 걱정이라고 생각합니다 밸런스를 맞추는것 부터 단순하지 않게 꼬는 부분까지 말이죠. 저희는 이 부분에서 제한된 기간동안 개발 할 수 있는 범위를 정하고 3가지 정도로 축약한거 같습니다.\nPvP가 기본이지만 PvE를 지원하자 (성장에 대한 니즈 충족) 날리기에 대한 파라미터를 분리하자 (뒤로 밀리는 것과, 위로 밀리는 것) 뱃지라는 스탯 개념을 추가하자 (스탯 요소는 항상 게임에서 성장욕구를 채워주죠) 결론을 내리기 위해서 꽤 많은 테스트를 하긴했는데 시간이 부족하다보니 아직 만족스럽진 못합니다\n마지막 담금질(완성도 높이기) 게임을 만들고 있는 많은 분들이 경험하시겠지만, 코어나 메타보다 진짜 제일 많이 시간이 드는건 역시 \u0026ldquo;완성도\u0026quot;단계입니다. 80%가 완성되면 20%를 채우기위해 수없이 많은 재구현과 테스트 고통의 시간들이죠ㅋㅋ 저희또한 그 과정동안 다양한 시도를 해보았고, 현재 제출된 버전이 최적의 값(?) 이라는 생각이 듭니다 ㅋㅋ\n마무리하며 어찌저찌 제출까지 하게 되서 감회가 새롭네요. 공모전 심사가 끝나면 패치할 수 있다고해서, 그때까지 다음 패치도 열심히 준비해볼까 합니다. 또한 이거 만드는 동안 로블록스에서 한국 개발자 커뮤니티를 구축해주셔서 얼마나 좋은지 모릅니다. 간혹 재밌는 개발 이야기나 개발 관련된 이야기하러 놀러오겠습니다. 저희가 따로 디스코드나 이런걸 운영하고 있지 않아서, 혹시나 게임에 대한 피드백이나 질문을 여기에 댓글로 남겨주시면 틈틈히 보고 답변 드릴게요 :) 그럼 또 뵙겠습니다. :)\n","date":"31","image":"images/post/hammerwars/featured.png","permalink":"https://wasd.so/blog/post-2/","tags":["샌드박스네트워크"],"title":"[샌드박스 네트워크 공모전 참여] 로블록스 해머워즈 제작 후기"},{"categories":["Engineering"],"contents":"안녕하세요. wasd팀에 IRoblian입니다.\n한국에서도 좀 심화적으로 스크립팅 하시는분이 계실 것 같아, 제가 보던 자료 하나를 정리해서 공유합니다.\n조금 전문적으로 로블록스 게임에 도전해보시거나, 심화적으로 다가가실때 도움이 될 것 같습니다.\n이 글은 RDC20에서 공유됐던, 아래의 영상을 정리한 글입니다.\n5 Powerful Code Patterns Behind Top Roblox Game(RDC 20)\nOverview 로블록스에서 사용하는 모든 패턴은 비동기를 다루기 위해 사용됩니다.\nSignals - 유저 입력과 이벤트를 처리 돕습니다. (Your Boat 에서 제작 및 사용) Maids - 메모리 릭을 막으줍니다. (Jailbreak에서 제작 및 사용) Promises - 데이터를 저장하고, 웹 요청을 지원합니다. (Adopt me에서 제작 및 사용) Springs - 애니메이션을 안전하게 만들어줍니다. Binders - 프로그래밍으로 오브젝트 스트리밍하는걸 가능하게 줍니다. 이런 도구들은 무엇보다 코드의 디커플링을 돕습니다. 실제로 Top 레벨 게임에서 이 패턴을 안쓰는 경우는 없다고 장담합니다.\n1. Signals 함께보면 좋은 자료\nLua Signal Class 비교 NevermoreEngine - Signal 철학 Observe the world, don’t query it.\n질의(query)하지 말고, 세상을 관찰하자.\n사용법 기본적인 사용법\nsignal:Connect(callback) 연결하고, 끊기\nlocal conn = event:Connect(function()...end) conn:Disconnect() 이벤트를 호출하기\nevent:Fire() 쿼리와 다른점 Querying\nWait를 이용해서 계속 기다려줘야합니다.\nwhile true do wait(0.5) print(Players:GetPlayers()) end Signals\n이벤트가 호출될 때를 감지할 수 있습니다.\nlocal players = {} players.PlayerAdded:Connect(function(player) players[player] = true end) players.PlayerRemoving:Connect(function(player) players[player] = nil end) Signal의 장점 이벤트에 즉시 반응합니다. 연결을 취소할 수 있습니다. Signal 안에서 에러가 발생해도, 게임 루프에 영향을 주지 않습니다.(전파되지 않음) Signal의 단점 간접 호출로 디버깅이 어렵습니다. 연산이 조금 비쌉니다. 연결을 취소하지 않으면 메모리 릭이 발생할 수 있습니다. 정리하면, 많은 프로그래밍에 있는 이벤트를 구현한 구현체라고 볼 수 있습니다.\n2. Maids 함께보면 좋은 자료\nHow to use a maid class NevermoreEngine - Maid 철학 Have an object to clean everything up!\n모든 것을 정리하는 오브젝트를 가져라!\n사용법 local maid = Maid:new() maid:GiveTask(task) --정리가 필요할 때 maid:DoCleaning() Maid에 넣을 수 있는 Tasks의 종류 함수(Functions) 커넥션(Connections) :Destory() 를 가진 모든 것 예시\nfunction RocketLauncher.new(Player, ItemData) local self = Gun.new(Player, ItemData) setmetatable(self, RocketLauncher) -- ...self.RocketWorld = RocketWorld.new() -- ...self.Maid:GiveTask(self.RocketWorld) return self end 정리하면, 다른 프로그래밍 언어에서 사용하는 가비지컬렉터 같은 개념입니다. Maid에 넣고, 깔끔하게 치울때 사용하면 좋아요.\n3. Promises 함께 보면 좋은 자료\nPromises why you should use them Roblox에서 yield의 문제 Roblox에서 yielding을 다루는건 실수를 많이 만듭니다. yielding 할때 다른 코드가 돌아가면 동시성 문제가 발생할 수 있습니다. Promises의 정의 프라미스는 태스크를 표현하는 방법입니다. 사용법 local promise = Promise.new(function(resolve) resolve(HttpService:GetAsync(\u0026#34;https://playadopt.me\u0026#34;)) end) Promise의 유용한 패턴 cancel() : promises가 취소되도록 요청할 수 있습니다. 요청한 결과가 더 이상 필요 없을 때 사용합니다. local promise = DownloadAndStreamScoreboardToUser(player) PlayerClosedScoreboard.OnServerEvent:Connect(function(playerWhoClosedScoreboard) if player == playerWhoClosedScoreboard then promise:cancel() end end) endThen() : 해당 작업이 완료된 후 다음 스케줄을 등록하고 싶을때 사용합니다. 이전에 있던 작업을 활용 할 수도 있습니다. local promise = Promise.new(function(resolve) resolve(HttpService:GetAsync(\u0026#34;https://playadopt.me\u0026#34;)) end) promise:andThen(function(result) print(\u0026#34;playadopt.me\u0026#39;s response was \u0026#34; .. result) end) all : 여러개의 task를 한번에 수행하나라도 실패하면 실패모든 태스크가 모두 성공하면 완료됩니다. local userLoadPromise =Promise.all({ loadUserHousePromise, loadUserMoneyPromise, loadUserPetsPromise }) userLoadPromise:andThen(function() -- Spawn the user into the game End):catch(function() -- Tell the user we failed to load their save End) 정리하면, Javascript나 C#에 있는 async/awake 문법을 가져온 거라고 할 수 있습니다.\n정말 잘 구현되어 있습니다.\n4. Springs 여기서부턴 선택적인 패턴이라 가볍게 설명합니다.\n함께 보면 좋은 자료\nPhysics based spring module Springs란? Tween을 더욱 쉽게 만들 수 있습니다. 자동차나 탈것 같은거 카메라 웍에 자주 사용됩니다. 사용 팁 물리 기반에서 Damping을 구현하는 방법입니다. Speed/Damping 파라미터를 활용해 쉽게 조정이 가능합니다. Value를 요청할때만 값을 사용하기 때문에 최적화에 좋습니다. 5. Binders 함께보면 좋은 자료\nBinder Pattern NevermoreEngine - Binder Binders란? 태그 시스템을 이용해 동적으로 오브젝트에 속성을 부여할 수 있습니다. 테스트를 쉽게 만듭니다. 사용팁 바인더는 오브젝트 스트리밍에 사용하기 좋습니다. CollectionService에 Tag 기반으로 동작합니다. 정리하며, 이 발표를 했던 분들이 Nevermore Engine 제작자여서 그런가 본인들의 내부 구현체를 많이 차용해서 관련 레퍼런스도 가져왔습니다.\n이 영상이나 패턴이 개발하시는데 혹은 전문 스크립터로 성장하는데 도움이 되셨으면 좋겠네요 :)\n많은 부분이 \u0026ldquo;비동기 처리\u0026quot;와 \u0026ldquo;메모리\u0026quot;나 \u0026ldquo;이벤트\u0026quot;와 같은 높은 수준의 프로그래밍 언어에서 사용되는 것들이여서 혹시나 Lua를 처음 언어로 접하신 분들이라면 \u0026ldquo;동시성 프로그래밍\u0026rdquo; 관련 된 책이나 글들을 찾아보시면 도움이 많이 될거예요!!\n그럼 또 찾아뵙겠습니다.(_ _)\n✅ 본래의 영상은 아래에서 확인해 볼 수 있습니다.\n","date":"01","image":"images/post/robloxgamepattern/rdc20.jpg","permalink":"https://wasd.so/blog/post-1/","tags":["Script, Coding-Pattern"],"title":"로블록스 게임 개발을 위한 5가지 코딩 패턴"}]